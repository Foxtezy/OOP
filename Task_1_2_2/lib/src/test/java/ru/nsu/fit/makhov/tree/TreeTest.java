/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.nsu.fit.makhov.tree;

import java.util.Collections;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.Arrays;
import java.util.stream.Collectors;
import ru.nsu.fit.makhov.tree.Tree.Node;
import ru.nsu.fit.makhov.tree.Tree.Search;

import static org.junit.jupiter.api.Assertions.*;

class TreeTest {

  Tree<Integer> tree;

  @Test
  public void treeSampleTest() {
    Tree<String> tree = new Tree<>();
    tree.add("A");
    Tree.Node<String> nodeB = tree.add("B");
    tree.add(nodeB, "AB");
    tree.add(nodeB, "BB");
    assertEquals(
        Arrays.asList("AB", "BB"),
        tree.stream().filter(s -> s.getSons().isEmpty())
            .filter(s -> s.getValue().contains("B"))
            .map(Tree.Node::getValue)
            .collect(Collectors.toList()));
  }

  @BeforeEach
  public void setup() { //[1, 2, -2, 4, 5, 6, -4, -5, -6]
    tree = new Tree<>();
    tree.add(1);
    Tree.Node<Integer> node2 = tree.add(2);
    tree.add(node2, 4);
    tree.add(node2, 5);
    tree.add(node2, 6);
    node2 = tree.add(-2);
    tree.add(node2, -4);
    tree.add(node2, -5);
    tree.add(node2, -6);
  }

  @Test
  public void treeBFSToListTest() {
    tree.setSearch(Search.BFS);
    assertEquals(Arrays.asList(1, 2, -2, 4, 5, 6, -4, -5, -6), tree.toList());
  }

  @Test
  public void treeDFSToListTest() {
    tree.setSearch(Search.DFS);
    assertEquals(Arrays.asList(1, -2, -6, -5, -4, 2, 6, 5, 4), tree.toList());
  }
  @Test
  public void treeBFSIteratorTest() {
    tree.setSearch(Search.BFS);
    Iterator<Node<Integer>> itr = tree.iterator();
    assertEquals(1, itr.next().getValue());
    assertTrue(itr.hasNext());
    assertEquals(2, itr.next().getValue());
    assertEquals(-2, itr.next().getValue());
    tree.add(1);
    assertThrows(ConcurrentModificationException.class, itr::next);
  }

  @Test
  public void treeDFSIteratorTest() {
    tree.setSearch(Search.DFS);
    Iterator<Node<Integer>> itr = tree.iterator();
    assertEquals(1, itr.next().getValue());
    assertTrue(itr.hasNext());
    assertEquals(-2, itr.next().getValue());
    assertEquals(-6, itr.next().getValue());
    tree.add(1);
    assertThrows(ConcurrentModificationException.class, itr::next);
  }

  @Test
  public void treeRemoveTest() {
    List<Node<Integer>> nodes = tree.stream().collect(Collectors.toList()); //[1, 2, -2, 4, 5, 6, -4, -5, -6]
    //leaf
    tree.remove(nodes.get(4));
    assertEquals(Arrays.asList(1, 2, -2, 4, 6, -4, -5, -6), tree.toList());
    //node
    tree.remove(nodes.get(2));
    assertEquals(Arrays.asList(1, 2, -4, -5, -6, 4, 6), tree.toList());
    //root
    tree.remove(nodes.get(0));
    assertEquals(Collections.emptyList(), tree.toList());
  }

}
